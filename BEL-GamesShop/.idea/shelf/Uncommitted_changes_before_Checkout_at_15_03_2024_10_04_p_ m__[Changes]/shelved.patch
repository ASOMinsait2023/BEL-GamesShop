Index: microservice-categories/src/main/java/com/minsait/microservicecategories/models/Categories.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.minsait.microservicecategories.models;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n@Data\r\n@Entity\r\n@Table(name = \"categories\")\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class Categories {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    @Column(name = \"name_category\")\r\n    private String nameCategory;\r\n    private String description;\r\n\r\n    @ManyToMany (cascade = CascadeType.ALL, fetch = FetchType.EAGER)\r\n    @JoinTable(name = \"category_platform\",\r\n            joinColumns = @JoinColumn(name = \"id_category\", referencedColumnName = \"id\"),\r\n            inverseJoinColumns = @JoinColumn(name = \"id_platform\", referencedColumnName = \"idPlatform\"))\r\n    private List<Platform> platforms;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/microservice-categories/src/main/java/com/minsait/microservicecategories/models/Categories.java b/microservice-categories/src/main/java/com/minsait/microservicecategories/models/Categories.java
--- a/microservice-categories/src/main/java/com/minsait/microservicecategories/models/Categories.java	(revision 0b13deb411ba38ed3fda044c940b1406aedd55dd)
+++ b/microservice-categories/src/main/java/com/minsait/microservicecategories/models/Categories.java	(date 1710558564293)
@@ -15,14 +15,14 @@
 public class Categories {
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
-    private Long id;
+    private Long idCategory;
     @Column(name = "name_category")
     private String nameCategory;
     private String description;
 
     @ManyToMany (cascade = CascadeType.ALL, fetch = FetchType.EAGER)
     @JoinTable(name = "category_platform",
-            joinColumns = @JoinColumn(name = "id_category", referencedColumnName = "id"),
+            joinColumns = @JoinColumn(name = "id_category", referencedColumnName = "idCategory"),
             inverseJoinColumns = @JoinColumn(name = "id_platform", referencedColumnName = "idPlatform"))
     private List<Platform> platforms;
 }
Index: .idea/copilot/chatSessions/xd.lck
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Private property of Exodus: 6292@DESKTOP-MBMPC15\r\n\r\njetbrains.exodus.io.LockingManager.lock(LockingManager.kt:88)\r\njetbrains.exodus.io.LockingManager.lock(LockingManager.kt:39)\r\njetbrains.exodus.io.FileDataWriter.lock(FileDataWriter.kt:70)\r\njetbrains.exodus.log.Log.tryLock(Log.kt:804)\r\njetbrains.exodus.log.Log.<init>(Log.kt:117)\r\njetbrains.exodus.env.Environments.newLogInstance(Environments.kt:117)\r\njetbrains.exodus.env.Environments.newLogInstance(Environments.kt:81)\r\njetbrains.exodus.env.Environments.newLogInstance(Environments.kt:77)\r\njetbrains.exodus.env.Environments$newInstance$4.invoke(Environments.kt:46)\r\njetbrains.exodus.env.Environments$newInstance$4.invoke(Environments.kt:46)\r\njetbrains.exodus.env.Environments.prepare(Environments.kt:120)\r\njetbrains.exodus.env.Environments.newInstance(Environments.kt:46)\r\nkotlinx.dnq.store.container.EntityStoreHelperKt.createTransientEntityStore(EntityStoreHelper.kt:40)\r\nkotlinx.dnq.store.container.EntityStoreHelperKt.createTransientEntityStore(EntityStoreHelper.kt:31)\r\nkotlinx.dnq.store.container.EntityStoreHelperKt.createTransientEntityStore$default(EntityStoreHelper.kt:30)\r\ncom.github.copilot.chat.session.persistence.xodus.XdChatSessionPersistenceService.initStore(XdChatSessionPersistenceService.kt:115)\r\ncom.github.copilot.chat.session.persistence.xodus.XdChatSessionPersistenceService.<init>(XdChatSessionPersistenceService.kt:22)\r\ncom.github.copilot.chat.session.persistence.xodus.XdChatSessionPersistenceService.<init>(XdChatSessionPersistenceService.kt:15)\r\ncom.github.copilot.chat.session.persistence.ChatSessionPersistenceServiceKt.ChatSessionPersistenceService(ChatSessionPersistenceService.kt:43)\r\ncom.github.copilot.chat.session.persistence.ChatSessionPersistenceServiceKt.chatSessionsPersistenceService(ChatSessionPersistenceService.kt:53)\r\ncom.github.copilot.chat.session.ChatSessionManager.<init>(ChatSessionManager.kt:45)\r\ncom.github.copilot.chat.session.ChatSessionManager.<init>(ChatSessionManager.kt:25)\r\ncom.github.copilot.chat.window.CopilotChatToolWindow.onCopilotReady(CopilotChatToolWindow.kt:133)\r\ncom.github.copilot.chat.window.CopilotChatToolWindow.access$onCopilotReady(CopilotChatToolWindow.kt:40)\r\ncom.github.copilot.chat.window.CopilotChatToolWindow$initCopilotStatusListener$1.invoke(CopilotChatToolWindow.kt:118)\r\ncom.github.copilot.chat.window.CopilotChatToolWindow$initCopilotStatusListener$1.invoke(CopilotChatToolWindow.kt:115)\r\ncom.github.copilot.status.CopilotAuthStatusKt.subscribeToCopilotAuthStatus$lambda$0(CopilotAuthStatus.kt:44)\r\ncom.intellij.util.messages.impl.MessageBusImplKt.invokeMethod(MessageBusImpl.kt:699)\r\ncom.intellij.util.messages.impl.MessageBusImplKt.invokeListener(MessageBusImpl.kt:663)\r\ncom.intellij.util.messages.impl.MessageBusImplKt.deliverMessage(MessageBusImpl.kt:422)\r\ncom.intellij.util.messages.impl.MessageBusImplKt.pumpWaiting(MessageBusImpl.kt:401)\r\ncom.intellij.util.messages.impl.MessageBusImplKt.access$pumpWaiting(MessageBusImpl.kt:1)\r\ncom.intellij.util.messages.impl.MessagePublisher.invoke(MessageBusImpl.kt:460)\r\njdk.proxy9/jdk.proxy9.$Proxy147.onCopilotStatus(Unknown Source)\r\ncom.github.copilot.status.CopilotStatusService.notifyApplication(CopilotStatusService.java:76)\r\ncom.github.copilot.status.CopilotStatusService.notifyApplication(CopilotStatusService.java:64)\r\ncom.github.copilot.github.GitHubAuthStartupActivity.handleAuthNotifications(GitHubAuthStartupActivity.java:54)\r\ncom.github.copilot.github.GitHubAuthStartupActivity.execute(GitHubAuthStartupActivity.java:35)\r\ncom.intellij.ide.startup.impl.StartupManagerImplKt$launchActivity$1$1.invokeSuspend(StartupManagerImpl.kt:534)\r\ncom.intellij.ide.startup.impl.StartupManagerImplKt$launchActivity$1$1.invoke(StartupManagerImpl.kt)\r\ncom.intellij.ide.startup.impl.StartupManagerImplKt$launchActivity$1$1.invoke(StartupManagerImpl.kt)\r\nkotlinx.coroutines.intrinsics.UndispatchedKt.startUndispatchedOrReturn(Undispatched.kt:78)\r\nkotlinx.coroutines.BuildersKt__Builders_commonKt.withContext(Builders.common.kt:167)\r\nkotlinx.coroutines.BuildersKt.withContext(Unknown Source)\r\ncom.intellij.ide.startup.impl.StartupManagerImplKt$launchActivity$1.invokeSuspend(StartupManagerImpl.kt:532)\r\nkotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\nkotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\r\nkotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)\r\nkotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)\r\nkotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)\r\nkotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/copilot/chatSessions/xd.lck b/.idea/copilot/chatSessions/xd.lck
--- a/.idea/copilot/chatSessions/xd.lck	(revision 0b13deb411ba38ed3fda044c940b1406aedd55dd)
+++ b/.idea/copilot/chatSessions/xd.lck	(date 1710552174441)
@@ -1,53 +1,0 @@
-Private property of Exodus: 6292@DESKTOP-MBMPC15
-
-jetbrains.exodus.io.LockingManager.lock(LockingManager.kt:88)
-jetbrains.exodus.io.LockingManager.lock(LockingManager.kt:39)
-jetbrains.exodus.io.FileDataWriter.lock(FileDataWriter.kt:70)
-jetbrains.exodus.log.Log.tryLock(Log.kt:804)
-jetbrains.exodus.log.Log.<init>(Log.kt:117)
-jetbrains.exodus.env.Environments.newLogInstance(Environments.kt:117)
-jetbrains.exodus.env.Environments.newLogInstance(Environments.kt:81)
-jetbrains.exodus.env.Environments.newLogInstance(Environments.kt:77)
-jetbrains.exodus.env.Environments$newInstance$4.invoke(Environments.kt:46)
-jetbrains.exodus.env.Environments$newInstance$4.invoke(Environments.kt:46)
-jetbrains.exodus.env.Environments.prepare(Environments.kt:120)
-jetbrains.exodus.env.Environments.newInstance(Environments.kt:46)
-kotlinx.dnq.store.container.EntityStoreHelperKt.createTransientEntityStore(EntityStoreHelper.kt:40)
-kotlinx.dnq.store.container.EntityStoreHelperKt.createTransientEntityStore(EntityStoreHelper.kt:31)
-kotlinx.dnq.store.container.EntityStoreHelperKt.createTransientEntityStore$default(EntityStoreHelper.kt:30)
-com.github.copilot.chat.session.persistence.xodus.XdChatSessionPersistenceService.initStore(XdChatSessionPersistenceService.kt:115)
-com.github.copilot.chat.session.persistence.xodus.XdChatSessionPersistenceService.<init>(XdChatSessionPersistenceService.kt:22)
-com.github.copilot.chat.session.persistence.xodus.XdChatSessionPersistenceService.<init>(XdChatSessionPersistenceService.kt:15)
-com.github.copilot.chat.session.persistence.ChatSessionPersistenceServiceKt.ChatSessionPersistenceService(ChatSessionPersistenceService.kt:43)
-com.github.copilot.chat.session.persistence.ChatSessionPersistenceServiceKt.chatSessionsPersistenceService(ChatSessionPersistenceService.kt:53)
-com.github.copilot.chat.session.ChatSessionManager.<init>(ChatSessionManager.kt:45)
-com.github.copilot.chat.session.ChatSessionManager.<init>(ChatSessionManager.kt:25)
-com.github.copilot.chat.window.CopilotChatToolWindow.onCopilotReady(CopilotChatToolWindow.kt:133)
-com.github.copilot.chat.window.CopilotChatToolWindow.access$onCopilotReady(CopilotChatToolWindow.kt:40)
-com.github.copilot.chat.window.CopilotChatToolWindow$initCopilotStatusListener$1.invoke(CopilotChatToolWindow.kt:118)
-com.github.copilot.chat.window.CopilotChatToolWindow$initCopilotStatusListener$1.invoke(CopilotChatToolWindow.kt:115)
-com.github.copilot.status.CopilotAuthStatusKt.subscribeToCopilotAuthStatus$lambda$0(CopilotAuthStatus.kt:44)
-com.intellij.util.messages.impl.MessageBusImplKt.invokeMethod(MessageBusImpl.kt:699)
-com.intellij.util.messages.impl.MessageBusImplKt.invokeListener(MessageBusImpl.kt:663)
-com.intellij.util.messages.impl.MessageBusImplKt.deliverMessage(MessageBusImpl.kt:422)
-com.intellij.util.messages.impl.MessageBusImplKt.pumpWaiting(MessageBusImpl.kt:401)
-com.intellij.util.messages.impl.MessageBusImplKt.access$pumpWaiting(MessageBusImpl.kt:1)
-com.intellij.util.messages.impl.MessagePublisher.invoke(MessageBusImpl.kt:460)
-jdk.proxy9/jdk.proxy9.$Proxy147.onCopilotStatus(Unknown Source)
-com.github.copilot.status.CopilotStatusService.notifyApplication(CopilotStatusService.java:76)
-com.github.copilot.status.CopilotStatusService.notifyApplication(CopilotStatusService.java:64)
-com.github.copilot.github.GitHubAuthStartupActivity.handleAuthNotifications(GitHubAuthStartupActivity.java:54)
-com.github.copilot.github.GitHubAuthStartupActivity.execute(GitHubAuthStartupActivity.java:35)
-com.intellij.ide.startup.impl.StartupManagerImplKt$launchActivity$1$1.invokeSuspend(StartupManagerImpl.kt:534)
-com.intellij.ide.startup.impl.StartupManagerImplKt$launchActivity$1$1.invoke(StartupManagerImpl.kt)
-com.intellij.ide.startup.impl.StartupManagerImplKt$launchActivity$1$1.invoke(StartupManagerImpl.kt)
-kotlinx.coroutines.intrinsics.UndispatchedKt.startUndispatchedOrReturn(Undispatched.kt:78)
-kotlinx.coroutines.BuildersKt__Builders_commonKt.withContext(Builders.common.kt:167)
-kotlinx.coroutines.BuildersKt.withContext(Unknown Source)
-com.intellij.ide.startup.impl.StartupManagerImplKt$launchActivity$1.invokeSuspend(StartupManagerImpl.kt:532)
-kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
-kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)
-kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)
-kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)
-kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)
-kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)
